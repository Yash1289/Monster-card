{"version":3,"sources":["Component/Card/Card.jsx","Component/Card-List/Card-list.jsx","Component/Search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","Monster","e","setState","searchText","target","value","state","fetch","then","response","data","json","console","log","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAUeA,EAPF,SAACC,GAAD,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,WCObC,EARE,SAACP,GAAD,OACb,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAACL,GAAD,OAChB,cAAC,EAAD,CAAwBA,QAASA,GAAtBA,EAAQC,UCChBK,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACd,8BACI,uBAAOC,KAAK,SAASZ,UAAU,SAASU,YAAaA,EAAaG,SAAUF,QCuCrEG,E,kDAnCb,WAAYf,GAAO,IAAD,8BAChB,cAAMA,IAORY,aAAc,SAACI,GACb,EAAKC,UAAS,iBAAO,CAAEC,WAAYF,EAAEG,OAAOC,WAN5C,EAAKC,MAAQ,CACXb,SAAW,GACXU,WAAa,IALC,E,qDAYlB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASE,OAEtB,OADAC,QAAQC,IAAIH,GACLA,KACRF,MAAK,SAACM,GAAD,OAAW,EAAKZ,SAAS,CAAET,SAAWqB,S,oBAE9C,WAAW,IAAD,EAC0BC,KAAKT,MAA/Bb,EADA,EACAA,SAAWU,EADX,EACWA,WACba,EAAmBvB,EAASwB,QAAO,SAAC5B,GACxC,OAAOA,EAAQE,KAAK2B,cAAcC,SAAShB,EAAWe,kBAExD,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWU,YAAY,gBAAgBC,aAAckB,KAAKlB,eACzD,cAAC,EAAD,CAAUJ,SAAUuB,W,GA9BPI,IAAMC,WCIbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8d03e4c4.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Card.css\"\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2 >{props.monster.name}</h2>\r\n    </div>\r\n)\r\n\r\nexport default Card","import React from \"react\" \r\nimport \"./Card-list.css\"\r\nimport Card from \"../Card/Card\"\r\n\r\n\r\nconst CardList = (props) => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map((monster) => (\r\n            <Card key={monster.id}  monster={monster} />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default CardList","import React from \"react\"\r\nimport \"./SearchBox.css\"\r\n\r\nconst SearchBox = ({ placeholder , handleChange}) => (\r\n    <div >\r\n        <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    </div>\r\n)\r\n\r\nexport default SearchBox","import React from \"react\"\nimport \"./App.css\"\nimport CardList from \"./Component/Card-List/Card-list\"\nimport SearchBox from \"./Component/Search-box/SearchBox\"\n\n\n\n\nclass Monster extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      monsters : [],\n      searchText : \"\"\n    }\n  }\n  handleChange= (e) => {\n    this.setState(() => ({ searchText: e.target.value }))\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => {\n      const data = response.json()\n      console.log(data)\n      return data })\n    .then((users) => this.setState({ monsters : users}))\n  }\n  render () {\n    const { monsters , searchText } = this.state\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchText.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monster RoloDex</h1>\n        <SearchBox placeholder=\"SearchMonster\" handleChange={this.handleChange}/>\n         <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default Monster;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Monster from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Monster />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}